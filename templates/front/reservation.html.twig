{% extends 'base.html.twig' %}

{% block title %}
    <title>Prendre rendez-vous avec moi</title>
{% endblock %}

{% block css %}
    <link rel="stylesheet" href="{{ asset('assets/css/datepicker.min.css') }}">
    <link rel="stylesheet" href="{{ asset('assets/css/jquery.timepicker.min.css') }}">
    <link rel="stylesheet" href="{{ asset('assets/css/jquery.datetimepicker.css') }}">
{% endblock %}

{% block main %}
    <h1>Prendre rendez-vous</h1>

    <div class="form_resa">
    {#        {{ form(form) }}#}
    {{ form_start(form, {'attr':{'class': 'taille_formulaire' }}) }}

    {{ form_label(form.nom, 'Nom',{'label_attr':{'class': 'taille_formulaire' }}) }}
    {{ form_widget(form.nom, {'attr': {'class': 'form-control'}}) }}
    {{ form_errors(form.nom) }}

    {{ form_label(form.prenom, 'Prénom',{'label_attr':{'class': 'taille_formulaire'}}) }}
    {{ form_widget(form.prenom, {'attr':{'class': 'form-control'}}) }}
    {{ form_errors(form.prenom) }}

    {{ form_label(form.adresseMail, 'Adresse Mail',{'label_attr':{'class':'taille_formulaire'}}) }}
    {{ form_widget(form.adresseMail, {'attr':{'class': 'form-control'}}) }}
    {{ form_errors(form.adresseMail) }}

    {{ form_label(form.telephone, 'Numéro de télephone',{'label_attr':{'class':'taille_formulaire'}}) }}
    {{ form_widget(form.telephone, {'attr':{'class': 'form-control'}}) }}
    {{ form_errors(form.telephone) }}

    {{ form_label(form.codePostal, 'Code postal',{'label_attr':{'class':'taille_formulaire'}}) }}
    {{ form_widget(form.codePostal, {'attr':{'class': 'form-control'}}) }}
    {{ form_errors(form.codePostal) }}

    {{ form_label(form.prestation, 'Choisissez la prestation',{'label_attr':{'class':'form-label'}}) }}
    {{ form_widget(form.prestation, {'attr':{'class': 'form-control'}}) }}
    {{ form_errors(form.prestation) }}

    {{ form_label(form.date_reservation, 'Choisissez la date',{'label_attr':{'class':'taille_formulaire jsdate'}}) }}
    {{ form_widget(form.date_reservation, {'attr':{'class': 'form-control'}}) }}
    {{ form_errors(form.date_reservation) }}

    {{ form_label(form.heure_reservation, 'Choisissez l\'heure',{'label_attr':{'class':'taille_formulaire jsdate'}}) }}
    {{ form_widget(form.heure_reservation, {'attr':{'class': 'form-control'}}) }}
    {{ form_errors(form.heure_reservation) }}

    {{ form_label(form.message, 'Message',{'label_attr':{'class':'form-label'}}) }}
    {{ form_widget(form.message, {'attr':{'class': 'form-control'}}) }}
    {{ form_errors(form.message) }}

    {{ form_widget(form.valider, {'attr':{'class': 'reservation btn-primary'}}) }}
    {{ form_end(form) }}
    </div>
{% endblock %}

{% block js %}
{#    Librairies JS qui vont permettres d'aider pour le DATETIMEPICKERS#}
    <script
            src="https://code.jquery.com/jquery-3.6.0.min.js"
            integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="
            crossorigin="anonymous"></script>
    <script src="{{ asset('assets/js/datepicker.min.js') }}"></script>
    <script src="{{ asset('assets/js/jquery.timepicker.min.js') }}"></script>
    <script src="{{ asset('assets/js/jquery.datetimepicker.full.js') }}"></script>
    {# Defer permet de retarder l'execution du script jusqu'à ce que la page soit chargée #}
    <script defer>
        // Initialisation du datePicker (c'est à dire le choix du jour de reservation')
        const datePicker = datepicker('#reservation_date_reservation', {
            //permet de rendre indisponible toutes les dates antérieur à l'actuelle
            minDate: new Date(),
            //Je formatte la date pour l'afficher à la journée actuelle
            formatter: (input, date, instance) => {
                input.value = date.toLocaleDateString();
            },
            // Avoir le calendrier qui commence le lundi
            startDay: 1,
            //fonction executée à chaque choix d'une date
            onSelect: function() {
                //On convertit la date selectionnée en format UTC et timestamp
                let date = this.dateSelected.getTime() - (60000 * this.dateSelected.getTimezoneOffset())
                //On créer un body dans lequel on met la date
                let body = new FormData();
                body.append('day', date.toString());
                //on fais un appel ajax (appel d'une URL) pour lequel on envoi le jour formaté
                fetch('/projet-emma/public/reservation/existing', { method: "POST",
                    body: body
                    //.then permet d'attendre la résolution de la promesse
                }).then((response) => {
                    //Une fois qu'on as la réponse, on récupere le json
                    response.json()
                        //.then permet d'attendre la résolution de la promesse
                            .then((data) => {
                                //Une fois qu'on as le json on redefinit le timePicker pour enlever les heures déja reservées
                                $('#reservation_heure_reservation').timepicker({
                                    //disableTimeRanges: [['12:00', '10:00'], ['18:00', '23:59']]
                                    disableTimeRanges: data.dates,
                                    minTime: "10:00",
                                    maxTime: "18:00",
                                    timeFormat: 'G:i',
                                    step: 10,
                                    autohide: true
                                });
                            })
                    }
                )
            },
            // Permet de desactiver tout les week-end de l'année'
            noWeekends: true,
        });
        // TimePicker
        $('#reservation_heure_reservation').timepicker({
            minTime: "10:00",
            maxTime: "18:00",
            timeFormat: 'G:i',
            step: 10,
            autohide: true
        });
    </script>
{% endblock %}